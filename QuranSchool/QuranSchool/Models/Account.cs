using AspNetCore.Identity.Mongo.Model;
using Mapster;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Entities;
using Newtonsoft.Json;

namespace QuranSchool.Models;

[Collection("Users")]
public class Account : MongoUser<string>, ITenant, IEntity, ICreatedOn, IModifiedOn
{
    public override string Id { get; set; }

    public Account()
    {
        ID ??= GenerateNewID();
        Id ??= GenerateNewID();
    }

    public AccountBase ToBaseAccount()
    {
        return this.Adapt<AccountBase>();
    }

    [BsonIgnoreIfNull] public string? PersonalId { get; set; }

    public string Name { get; set; }
    public string Description { get; set; }
    public DateTime LastLogin { get; set; }
    public DateTime PasswordUpdatedOn { get; set; }
    public DateTime CreatedOn { get; set; } = DateTime.Now;
    public DateTime ModifiedOn { get; set; }


    public string GenerateNewID()
    {
        return ObjectId.GenerateNewId().ToString();
    }

    public void GenerateID()
    {
        var id = GenerateNewID();
        Id = id;
        ID = id;
    }


    public string ID { get; set; }

    [JsonIgnore] public override string PasswordHash { get; set; }


    [IgnoreDefault] public AccountBase CreatedBy { get; set; }
    [BsonIgnoreIfNull] public string? AutoGeneratedPassword { get; set; }

    [BsonRepresentation(BsonType.String)]
    [JsonProperty("RolePriority")]

    public AccountType Role { get; set; } = AccountType.User;

    [JsonProperty("Role")] public string RoleName => Role.ToString();

    public bool Enabled { get; set; } = true;

    [IgnoreDefault] public Avatar Avatar { get; set; }
    public bool RequiredToChangePassword { get; set; }
    public string TenantId { get; set; }
}