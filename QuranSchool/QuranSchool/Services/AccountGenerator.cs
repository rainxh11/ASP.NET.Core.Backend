using FluentValidation;
using Microsoft.AspNetCore.Identity;
using QuranSchool.Models;
using QuranSchool.Models.Request;
using StringRandomizer;
using StringRandomizer.Options;
using HashCode = Invio.Hashing.HashCode;

namespace QuranSchool.Services;

public class AccountGenerator
{
    private readonly ILogger<AccountGenerator> _logger;
    private readonly IValidator<CreateAccountModel> _validator;
    private readonly UserManager<Account> _userManager;

    public AccountGenerator(ILogger<AccountGenerator> logger,
        IValidator<CreateAccountModel> validator,
        UserManager<Account> userManager)
    {
        _userManager = userManager;
        _logger = logger;
        _validator = validator;
    }

    public string GeneratePassword(int min = 8, bool digits = true, bool upper = false, bool lower = true,
        bool special = false)
    {
        var randomizer = new Randomizer(min, new DefaultRandomizerOptions(digits, upper, lower, special));
        return randomizer.Next();
    }

    public async Task<Account> CreateAccount(string personalId, CreateAccountModel model,
        bool randomPassword = true,
        bool randomUsername = true)
    {
        try
        {
            var username = randomUsername != true
                ? model.UserName
                : new Randomizer(8, new DefaultRandomizerOptions(false, false, true)).Next();
            var password = randomPassword != true
                ? model.Password
                : new Randomizer(8, new DefaultRandomizerOptions()).Next();

            model.UserName = username;
            model.Password = password;
            model.ConfirmPassword = password;

            var validations = await _validator.ValidateAsync(model);
            if (!validations.IsValid)
                throw new ValidationException(validations.Errors);

            var hash = HashCode.From(personalId, model.Role);


            var account = new Account
            {
                Name = model.Name,
                UserName = username,
                Description = model.Description,
                RequiredToChangePassword = true,
                Role = model.Role,
                AutoGeneratedPassword = password,
                PersonalId = personalId,
                CreatedBy = new AccountBase
                {
                    Name = "SYSTEM ACCOUNT",
                    UserName = "SYSTEM",
                    ID = "0"
                },
                EmailConfirmed = model.EmailConfirmed ?? true,
                Enabled = model.Enabled ?? true
            };


            await _userManager.CreateAsync(account, password);

            _logger.LogInformation("Account Auto Generated for '{0}'", account.Name);
            return account;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            return null;
        }
    }
}